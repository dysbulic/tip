<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20000303 Stylable//EN"
 "http://www.w3.org/TR/2000/03/WD-SVG-20000303/DTD/svg-20000303-stylable.dtd">
<svg viewBox="-16 -1 12 16" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="on-gradient">
      <stop offset="5%" style="stop-color: orange">
        <animateColor attributeName="stop-color" attributeType="CSS"
         values="yellow;green;blue;yellow" dur="10s"
         begin="SVGLoad;mousedown" repeatCount="1"/>
      </stop>
      <stop offset="95%" style="stop-color: red">
        <animateColor attributeName="stop-color" attributeType="CSS"
         values="red;orange;red;purple;red" dur="9s"
         repeatCount="1"/>
      </stop>
    </linearGradient>
    <script type="text/javascript"><![CDATA[
      function setNumber(number) {
        var bits;
        switch(number) {
        case 0: case '0':  bits = "1111110"; break;
        case 1: case '1':  bits = "0110000"; break;
        case 2: case '2':  bits = "1101101"; break;
        case 3: case '3':  bits = "1111001"; break;
        case 4: case '4':  bits = "0110011"; break;
        case 5: case '5':  bits = "1011011"; break;
        case 6: case '6':  bits = "1011111"; break;
        case 7: case '7':  bits = "1110000"; break;
        case 8: case '8':  bits = "1111111"; break;
        case 9: case '9':  bits = "1111011"; break;
        case 10: case 'a': case 'A': case '10': bits = "1110111"; break;
        case 11: case 'b': case 'B': case '11': bits = "0011111"; break;
        case 12: case 'c': case 'C': case '12': bits = "1001110"; break;
        case 13: case 'd': case 'D': case '13': bits = "0111101"; break;
        case 14: case 'e': case 'E': case '14': bits = "1001111"; break;
        case 15: case 'f': case 'F': case '15': bits = "1000111"; break;
        default: bits = "";
        }
        setBitField(bits);
      }
      function setBitField(bits) {
        var segments = new Array();
        for(var i = 0; i < bits.length; i++) {
          segments.push(bits[i] != "0");
        }
        updateSegments(segments);
      }

      var segments = new Array();
      function updateSegments(isOn) {
        if(segments.length == 0) {
          var polygons = document.getElementsByTagName("polygon");
          for(var i = 0; i < polygons.length; i++) {
            segments[i] = polygons.item(i);
          }
        }
        for(var i = 0; i < isOn.length; i++) {
          segments[i].setAttribute("class", isOn[i] ? "on" : "off");
        }
        for(; i < segments.length; i++) {
          segments[i].setAttribute("class", isOn[i] ? "on" : "off");
        }
      }
      
      function checkURL() {
        var valueSet = false;
        var search = document.location ? document.location.search : window.location.search;
        if(search != "") {
          var params = search.substring(1).split(/&/);
          for(var i = 0; i < params.length; i++) {
            params[i] = params[i].replace(/\+/gi, " ");
            var equal_index = params[i].indexOf("=");
            if(equal_index >= 0) {
              params[unescape(params[i].substring(0, equal_index))] =
                unescape(params[i].substring(equal_index + 1));
            }
          }
          if(typeof(params['num']) != "undefined") { setNumber(params['num']); valueSet = true; }
          if(typeof(params['bits']) != "undefined") { setBitField(parseInt(params['bits'])); valueSet = true; }
        }
        if((typeof(params) != "undefined" && typeof(params['anim']) != "undefined")
           || (!valueSet && window.parent == window)) {
          var autorun = function() {
            setNumber(this.count);
            this.count = (this.count + 1) % 16;
            setTimeout(function() { autorun.call(autorun); }, 1000);
          }
          autorun.count = 0;
          autorun.call(autorun);
        }
      }
      this.addEventListener("load", checkURL, true);
    ]]></script>
  </defs>
  <style type="text/css">
    polygon { stroke-width: 0.1; stroke: black; }
    .on { fill: #730000; fill: url(#on-gradient); }
    .off { fill: #F3F3F3; stroke: #DDD; }
  </style>
  <polygon class="off" points="-14,1 -13,2 -7,2 -6,1 -7,0 -13,0 "/>
  <polygon class="off" points="-6,1 -7,2 -7,6 -6,7 -5,6 -5,2 "/>
  <polygon class="off" points="-6,7 -7,8 -7,12 -6,13 -5,12 -5,8 "/>
  <polygon class="off" points="-14,13 -13,14 -7,14 -6,13 -7,12 -13,12 "/>
  <polygon class="off" points="-14,7 -15,8 -15,12 -14,13 -13,12 -13,8 "/>
  <polygon class="off" points="-14,1 -15,2 -15,6 -14,7 -13,6 -13,2 "/>
  <polygon class="off" points="-14,7 -13,8 -7,8 -6,7 -7,6 -13,6 "/>
</svg>
