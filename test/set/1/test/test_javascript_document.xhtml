<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Dynamic Eval of Javascript Functions</title>
    <link type="text/css" rel="stylesheet" href="javascript_test.css" />
    <style type="text/css">
    </style>
    <script type="text/javascript" src="../javascript_compatability/compatability.js"></script>
    <script id="testscript" type="text/javascript">
      if(typeof(debug) != "undefined") {
        debug(filename + " in HTML body: " + typeof(document.createElement('div').style));
      }
    </script>
    <script type="text/javascript">
      function debug(text) {
        var debugArea = document.createElement("div");
        debugArea.appendChild(document.createTextNode(text));
        //debugArea.innerHTML = text;
        document.getElementsByTagName("body").item(0).appendChild(debugArea);
      }
      function debugBreak() {
        document.getElementsByTagName("body").item(0)
          .appendChild(document.createElement("hr"));
      }
    </script>
  </head>
  <body>
    <p>I am loading javascript from an external file retrieved via a
    <code>XMLHttpRequest</code>, but the
    <code>document.createElement</code> call is returning a
    <code>Element</code> rather than a <code>HTMLDivElement</code>
    that I want. (Specifically, the element it is returning has no
    <code>style</code> member.) I need to figure out a clean way to
    access the document.</p>
    <form action="" onsubmit="eval(this['code'].value); return false">
      <div style="height: 90%">
        <textarea name="code" cols="" rows=""
><![CDATA[eval("var func = function() { debug('In function: ' + typeof(document.createElement('div').style)) }");
func();
function Callback(url) {
  this.url = url;
  this.file = url.replace(/.*\//, "");
  var call = function(request) { this.container.callback.call(this.container, request) }
  call.container = this;
  loadXMLDocument(url, call);
}
Callback.prototype = new Function();
Callback.prototype.callback = function(request) {
  if(request.readyState == 4) {
    debug("ID Got: " + this.url + " (" + request.status + ")");
    if(request.status == 200) {
      var functionText = request.responseXML.getElementById('testscript').childNodes[0].data;
      eval("var func = function(filename) { " + functionText + " }");
      func(this.file);
    }
    debugBreak();
  }
}
var url = "text/xml,<code id='testscript'>debug(typeof(document.createElement('div').style))</code>";
//new Callback("data:" + escape(url)); // this doesn't work since data uri's are not supported
new Callback(window.location.pathname);
new Callback(window.location.pathname.replace(/\.[^\.]+$/, ".xml"));

function ArrayCallback(url, pathString) {
  this.url = url;
  this.file = url.replace(/.*\//, "");
  this.path = pathString.split(/:/);
  var call = function(request) { this.container.callback.call(this.container, request) }
  call.container = this;
  loadXMLDocument(url, call);
}
ArrayCallback.prototype = new Function();
ArrayCallback.prototype.callback = function(request) {
  if(request.readyState == 4) {
    debug("Path Got: " + this.url + " (" + request.status + ")");
    if(request.status == 200) {
      var node = request.responseXML;
      for(var i = 0; i < this.path.length; i++) {
        node = node.childNodes.item(this.path[i]);
      }
      var functionText = node.childNodes[0].data;
      eval("var func = function(filename) { " + functionText + " }");
      func(this.file);
    }
    debugBreak();
  }
}
new ArrayCallback(window.location.pathname.replace(/\.[^\.]+$/, ".xml"), "0:1");
new ArrayCallback(window.location.pathname.replace(/\.[^\.]+$/, ".xml"), "0:3");
new ArrayCallback(window.location.pathname.replace(/\.[^\.]+$/, ".xml"), "0:5");]]></textarea>
      </div>
      <div><input type="submit" value="Go"></input></div>
    </form>
  </body>
</html>
