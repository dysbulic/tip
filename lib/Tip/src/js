String.prototype.startsWith = function(string) {
    return this.substr(0, string.length) == string;
};

String.prototype.endsWith = function(string) {
    return this.substr(Math.max(0, this.length - string.length)) == string;
};

String.prototype.escapeHTML = function(string) {
    return this.replace("<", "&lt;");
};

$.get("html", function(data) { alert("Mg: " + data); });
$.get("src/write_vars.php", { 'choices[]': ["Jon", "Susan"]}, function(msg) { alert("Msg: " + msg); });

// Tip is a nested state machine with random access cache
function Tip() {
    var cache = new StringStack();
    cache['transition speed'] = 'slow';
        
    // Load a resource string from the remote server
    this.load = function(resourceName, callback) {
        // ToDo: Add checking plugin for local copy
        if(resourceName.endsWith("jQuery")) {
            alert("Loading: " + resourceName);
            $.getScript(resourceName, callback);
        }
    }

    this.send = function(cls, id, message) {
    }

    // "do" is reserved in javascript
    this.start = function() {
    }

    this.ls = function() {
        
    }

    this.vr = function(key, func) {
        if(cache.hasKey(key) && !cache['key'].expired()) return func(cache['key']);
        $.get("test.php", { 'choices[]': ["Jon", "Susan"]});
    }     
    

    this.load(".../lib/Tip/lib/jQuery", function(str) { alert("Loaded: " . str); });

/*
    for(var i = 0; i < funcs.length && i < arguments.length; i++) {
        // If a function exists with the given name and the number of arguments is
        // a multiple of the required number, they're processed.
        if(funcs[i][arguments[0]] && (arguments.length - 1) % i == 0) {
            var arglist = array();
            for(var j = 0; j < arguments.length; j += i) {
                for(var k = j; k < j + i; k++) {
                    // The access time of this function is parallelizable and only the
                    // bus access needs to be ordered.
                    PUSH(arglist, arguments[k]);
                }
            }
            funcs[i][arguments[0]].call(funcs[i][arguments[0]], arglist);
        }
    }
*/    
}

var tip = new Tip();

function StringStack() {
    var add = function(what, where) {
    };

    var push = function(what) {
    };

    var pop = function(what) {
    };

    var queue = function(what) {
    };
}

$(document).ready(function() {
    $("h1").fadeOut(tip.vr('transitionSpeed'));
    tip.start("fade", "h1", "#counter");
  });

var tiproot = "http://will.tip.dhappy.org/";
var project = "projects/Department of Happiness/";
var publicURI = tiproot + project;

$(document).ready(function() {
    // Hopefully this will execute iff the original doesn't load and
    // look for it on the public site
    $("link").one("error", function() {
        uri = $(this).attr("href");
        if(!uri.startsWith("http://")) {
          $(this).after($(this).clone().attr("href", publicURI + uri));
        }
      });

    // For this to work in Firefox 3.5, the page must be served as xhtml.
    // See: http://will.tip.dhappy.org/test/test_object_dom_node.html
    $("object").each(function() {
        var uri = $(this).attr("data");
        if(!uri) return;
        pubURI = uri.startsWith("http://") ? uri : publicURI + uri;
        msg = $(this).attr("title");
        msg == "" ? msg = uri : "";
        $(this).append
          ($(this).clone().attr("data", pubURI)
           .append($("<p/>")
                   .append($("<a/>").attr("href", uri)
                           .append(msg.escapeHTML()))));
      });
  });
  
