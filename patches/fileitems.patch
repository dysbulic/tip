Index: src/java/org/apache/turbine/util/parser/BaseValueParser.java
===================================================================
RCS file: /home/cvspublic/jakarta-turbine-2/src/java/org/apache/turbine/util/parser/BaseValueParser.java,v
retrieving revision 1.8
diff -u -r1.8 BaseValueParser.java
--- src/java/org/apache/turbine/util/parser/BaseValueParser.java	12 Feb 2003 17:24:30 -0000	1.8
+++ src/java/org/apache/turbine/util/parser/BaseValueParser.java	25 Feb 2003 01:37:46 -0000
@@ -113,7 +113,8 @@
         Recyclable
 {
     /**
-     * Random access storage for parameter data.
+     * Random access storage for parameter data. This maps
+     * request parameters onto String[]'s.
      */
     protected Hashtable parameters = new Hashtable();
     /**
Index: src/java/org/apache/turbine/util/parser/DefaultParameterParser.java
===================================================================
RCS file: /home/cvspublic/jakarta-turbine-2/src/java/org/apache/turbine/util/parser/DefaultParameterParser.java,v
retrieving revision 1.7
diff -u -r1.7 DefaultParameterParser.java
--- src/java/org/apache/turbine/util/parser/DefaultParameterParser.java	12 Feb 2003 17:24:30 -0000	1.7
+++ src/java/org/apache/turbine/util/parser/DefaultParameterParser.java	25 Feb 2003 01:37:46 -0000
@@ -57,6 +57,7 @@
 import java.net.URLDecoder;
 import java.util.Enumeration;
 import java.util.StringTokenizer;
+import java.util.Hashtable;
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.fileupload.FileItem;
@@ -110,6 +111,11 @@
     private byte[] uploadData = null;
 
     /**
+     * Map of request parameters to FileItem[]'s
+     */
+    protected Hashtable fileParameters = new Hashtable();
+
+    /**
      * Create a new empty instance of ParameterParser.  Uses the
      * default character encoding (US-ASCII).
      *
@@ -203,7 +209,7 @@
             {
                 tmp = (String) names.nextElement();
                 parameters.put(convert(tmp),
-                        (Object) req.getParameterValues(tmp));
+                               (Object) req.getParameterValues(tmp));
             }
         }
 
@@ -279,14 +285,14 @@
         {
             items = new FileItem[1];
             items[0] = value;
-            parameters.put(convert(name), items);
+            fileParameters.put(convert(name), items);
         }
         else
         {
             FileItem[] newItems = new FileItem[items.length + 1];
             System.arraycopy(items, 0, newItems, 0, items.length);
             newItems[items.length] = value;
-            parameters.put(convert(name), newItems);
+            fileParameters.put(convert(name), newItems);
         }
     }
 
@@ -302,7 +308,7 @@
         try
         {
             FileItem value = null;
-            Object object = parameters.get(convert(name));
+            Object object = fileParameters.get(convert(name));
             if (object != null)
             {
                 value = ((FileItem[]) object)[0];
@@ -327,7 +333,7 @@
     {
         try
         {
-            return (FileItem[]) parameters.get(convert(name));
+            return (FileItem[]) fileParameters.get(convert(name));
         }
         catch (ClassCastException e)
         {
