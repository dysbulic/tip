<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:tip="http://dhappy.org/tip/0.1/a" xml:lang="en">
  <head>
    <title>Extending jQuery's Change Listener</title>
<!--
    <link rel="stylesheet" type="text/css" href="doh.css" />
    <link rel="stylesheet" type="text/css" href="doh_ie.css" tip:browser="ie"/>
-->
    <style type="text/css">
      body { max-width: 750px; margin: auto; }
      .head h1, .head h2 { text-align: center; }
      object { width: 100%; }
      #example, #mirror { width: 48%; margin: 1em 0; height: 5em; border: 1px solid; font-size: 12.5pt; padding: .25em; }
      #example { float: left; }
      #mirror { float: right; }
      pre { background-color: lightgray; padding: .25em; }
      .code { max-height: 15em; overflow: auto; }
      [data='blob.svg'] { height: 35px; }
    </style>
    <!--<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script>-->
    <script type="text/javascript" src=".../sys/lib/jquery/dev/dist/jquery.js"></script>
    <script type="text/javascript" src=".../sys/lib/jquery/plugin/chili/dist/jquery.chili.js"></script>
    <script type="text/javascript">//<![CDATA[
      $.chili.options.recipeFolder = '.../sys/lib/jquery/plugin/chili/dist/recipes/';
      $.chili.options.automatic = false;
      $(function() { $('code').chili() });
    //]]></script>
    <script type="text/javascript" src="tip/src/$.jquery"></script>
    <script type="text/javascript" src="tip/src/prop.jquery"></script>
    <script type="text/javascript" src="tip/src/prop.change.jquery"></script>
    <script type="text/javascript" src="tip/src/prop.link.jquery"></script>
    <script type="text/javascript" src="tip/src/DOMAttrModified.js"></script>
    <script type="text/javascript" src="tip/src/code.jquery"></script>
    <script id="mir" type="text/javascript">//<![CDATA[
    $(function() {
      function mirror() { $('#mirror').text($(this).val()); }
      mirror.call($('#example'));
      $('#example').change(mirror);
    });
    //]]></script>
  </head>
  <body>
    <div class="head">
      <h1>Extending jQuery's Change Listener</h1>
      <h2><a href="mailto:Will%20Holcomb%20%3Cwill@dhappy.org%3E">Will Holcomb</a></h2>
      <h2>21 February 2010</h2>
    </div>

    <div id="test"></div>

    <p>The <a href="http://jquery.com">jQuery</a> javascript library allows a programmer to associate a <a href="http://api.jquery.com/change/">change listener</a> with a <acronym title="Hypertext Markup Language">html</acronym> <code>input</code> element and call a function when a field is altered. Consider the following code:</p>

    <tip:code class="code" href="#mir" />

    <p>Anytime the text in the element with id "<code>example</code>" is changed, it is copied to <code>mirror</code>.</p>

    <form action="" onsubmit="return false"><textarea id="example">This is test text&hellip;</textarea></form>
    <p id="mirror"></p>

    <p>Useful enough, but it only works for form fields. It would be handy to be able to listen to other sorts of changes in the document as well.</p>

    <!--more-->

    <p>The first extension I would like is the ability to listen to changes to an element's attributes. What if I wanted to have the same mirroring idea from above, but use it for the <code>style</code> attribute. What would that look like? The most obvious analogue is:</p>

    <pre><code class="javascript">$('#example').attr('style').change(function() {
  $('#mirror').attr('style', $(this).attr('style'));
})</code></pre>

    <p>This won't work, however, because the <code>attr</code> function returns a value. There are two directions I could see going to work around this. Option one is to add an function that returns an encapsulation of the attribute:</p>

    <pre><code class="javascript">$('#example').prop('style').change(function() {
  $('#mirror').attr('style', $(this).val());
})</code></pre>

    <p>The other is to pass in the attribute name as a text string:</p>

    <pre><code class="javascript">$('#example').change('style', function() {
  $('#mirror').attr('style', $(this).attr('style'));
})</code></pre>

    <p>The former method seems more in line with jQuery syntax. So I need a function that takes a <a href="http://docs.jquery.com/Types#jQuery">jQuery object</a> and transforms it to a list of <a href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-637646024">attributes</a>. Only <acronym title="Document Object Model">DOM</acronym> elements can be <code>add</code>ed to jQuery objects though, so a custom holder has to be created:</p>

    <tip:code class="code" href="github/tip/raw/v.0.1/src/prop.jquery" />

    <p>There is a <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-MutationEvent">change event</a> listener on the base element which also stores a callback list. When an event is fired, it is filtered out to the appropriate listeners.</p>
    
    <p>The resulting application code is pretty close to what was desired:</p>

    <script id="blue" type="text/javascript">
      $('#example').prop('style').change(function() {
        $('#mirror').prop(this.name).value = this.value;
      });
      $('#example').attr('style', 'color: blue');
    </script>

    <tip:code class="code" href="#blue" />

    <p>My goal is to link changes in a data model for the page to the attributes of elements which means listening for changes to objects as well. The application code should look about the same:</p>

    <pre><code class="javascript">var obj = { };
$(obj).prop('style').change(function() {
  $('#mirror').attr(this.name, this.value);
})</code></pre>

    <p>The code for this works by wrapping the object access in getters and setters which monitor changes and fire events. At this point the getter and setter code isn't fixed for <acronym title="Internet Explorer">IE</acronym>.</p>

    <tip:code class="code" href="github/tip/raw/v.0.4/src/prop.change.jquery" />

    <p>My goal with this is to link the values of data structure elements to the value of attributes of <acronym title="Document Object Model">DOM</acronym> nodes. With the change listeners, that code is relatively simple:</p>

    <tip:code class="code" href="github/tip/raw/v.0.4/src/prop.link.jquery" />

    <p>The resultant application code seems straightforward:</p>

    <script id="green" type="text/javascript">
      obj = {};
      $(obj).prop('style').link($('#example'));
      obj['style'] = 'color: green'; // Also sets #example.style
    </script>

    <tip:code class="code" href="#green" />

    <p><em>You may have noticed that both <a href="#example">boxes</a> are green, this is because the <a href="#blue">attribute mirror</a> example linked the styles of the two boxes together, so setting <code>example</code> to green changed <code>mirror</code> as well.</em></p>

<!--
    <script type="text/javascript">
      var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
      document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>
    <script type="text/javascript">
      var pageTracker = _gat._getTracker("UA-2592249-5");
      pageTracker._initData();
      pageTracker._trackPageview();
    </script>
-->
  </body>
</html>
