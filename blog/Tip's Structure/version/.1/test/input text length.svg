<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Text Bounding Box</title>
  <defs>
      <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>
      <script type="text/javascript"><![CDATA[
        $(window).bind( 'load', function() {
            var $root = $.__.$('#')
            $root.__defineGetter__( 'view', function() {
                this.view_obj =
                    ( this.view_obj || ( function( attr ) {
                        var view = attr.split( ' ' )
                        return {
                            x : view[0],
                            y : view[1],
                            width : view[2],
                            height : view[3],
                        }
                    } )( this.attr( 'viewBox' ) ) )
                return this.view_obj
            } )
            $root.__defineSetter__( 'view', function( view ) {
                this.view_obj = view
                this.attr( 'viewBox', ( view.x + ' ' +
                                        view.y + ' ' +
                                        view.width + ' ' +
                                        view.height ) )
                return this.view_obj
            } )

            var resize = false
            if( resize ) {
                $root.view = { x : - window.innerWidth / 2,
                               width : window.innerWidth,
                               y : - window.innerHeight / 2,
                               height : window.innerHeight,
                             }
            }

            var $input = ( function() {
                var $input = $.__.$('<html:input/>')
                $input.__defineGetter__( 'value', function( ) {
                    return this.val.apply( this, arguments )
                } )
                $input.__defineSetter__( 'value', function( value ) {
                    if( this.value != value ) {
                        this.val.apply( this, arguments )
                        this.change()
                    }
                    return this
                } )
                $input.keyup( function( event ) {
                    $input.change()
                } )
                return $input
            } )()
            var $holder = ( $.__.$('<foreignObject/>')
                            .css( 'visibility', 'hidden' )
                            .attr( $root.view ) )
            $root.append( $holder.append( $input ) )
            var input = $input.get(0)
            $holder.attr( {
                x : - input.offsetWidth / 2,
                width : input.offsetWidth,
                y : - input.offsetHeight / 2,
                height : input.offsetHeight,
            } )
            $holder.css( 'visibility', 'visible' )
            
            var $line = ( function() {
                var $line = $.__.$('<line/>')
                $line.__defineSetter__( 'x', function( x ) {
                    this.attr( 'x1', x )
                    this.attr( 'x2', x )
                } )
                $line.__defineSetter__( 'y', function( y ) {
                    this.attr( 'y1', y )
                    this.attr( 'y2', y )
                } )
                $line.__defineGetter__( 'start', function() {
                    this.start_obj = this.start_obj || {
                        get x( ) { return parseFloat( $line.attr( 'x1' ) ) },
                        get y( ) { return parseFloat( $line.attr( 'y1' ) ) },
                        set x( x ) { $line.attr( 'x1', x ) },
                        set y( y ) { $line.attr( 'y1', y ) },
                    }
                    return this.start_obj
                } )
                $line.__defineSetter__( 'start', function( start ) {
                    this.start.x = start.x
                    this.start.y = start.y
                } )
                $line.__defineGetter__( 'end', function() {
                    this.end_obj = this.end_obj || {
                        set x( x ) { $line.attr( 'x2', x ) },
                        set y( y ) { $line.attr( 'y2', y ) },
                    }
                    return this.end_obj
                } )
                return $line
            } )()
            $root.append( $line )

            var $work = ( $.__.$('<g/>')
                          .attr( 'visibility', 'hidden' )
                        )
                          
            var $text = ( function() {
                var $text = $.__.$('<text/>')
                $text.__defineGetter__( 'x', function( ) {
                    return this.attr( 'x' )
                } )
                $text.__defineSetter__( 'x', function( x ) {
                    this.attr( 'x', x )
                } )
                $text.__defineGetter__( 'y', function( ) {
                    return this.attr( 'y' )
                } )
                $text.__defineSetter__( 'y', function( y ) {
                    this.attr( 'y', y )
                } )
                
                var $text_text = $text.text
                $text.__defineGetter__( 'text', function( ) {
                    $text_text.apply( $text, arguments )
                } )
                $text.__defineSetter__( 'text', function( ) {
                    $text_text.apply( $text, arguments )
                } )
                $text.__defineGetter__( 'bbox', function() {
                    return $text.get(0).getBBox()
                } )
                return $text
            } )()
            $root.append( $work.append( $text ) )

            $input.change( function() {
                $text.text = $input.value
                $text.css( {
                    'font-family' : $input.css( 'font-family' ),
                    'font-size' : $input.css( 'font-size' ),
                    'font-weight' : $input.css( 'font-weight' ),
                } )

                $line.y = ( parseFloat( $holder.attr( 'y' ) ) +
                            $holder.attr( 'height' ) * 1.1 )

                // The alignment is off for an unknown reason
                var offset = ( $.browser.mozilla || $.browser.webkit
                               ? 1 : 0 )
                $line.start.x = ( parseFloat( $input.css( 'border-left-width' ) ) +
                                  parseFloat( $input.css( 'padding-left' ) ) +
                                  parseFloat( $input.css( 'margin-left' ) ) +
                                  parseFloat( $holder.attr( 'x' ) ) +
                                  offset )

                var pad = ( $.browser.mozilla ? .5 : 0 )

                $line.end.x = ( $line.start.x + $text.bbox.width + pad )
            } )
            $input.value = 'text'
        } )
      ]]></script>

      <style type="text/css">
        text { text-anchor: middle }
        rect { fill: #F0F0F0; fill-opacity: .75;
               stroke-width: .3; stroke: black; stroke-opacity: .5 }
input, input:focus { border: none; outline: none }
        line { stroke: blue }
      </style>
  </defs>
</svg>
