<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:tip=".../lib/tip/2010/05/05/"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:smil="http://www.w3.org/ns/SMIL30"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Hello World</title>
  <defs>
    <style type="text/css">
    </style>
    <script type="text/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/pointers.js"/>
    <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/tip.jquery"/>

    <script type="text/javascript"><![CDATA[
        var events = {}
        var scene = ( function() {
            var scene = new List
            scene.capture = { frequency : { mHz : 1000 } }

            var time = {
                get now() { return ( new Date() ).getTime() }
            }


            function once() {
                var now = time.now
                scene.begin = scene.begin || now
                scene.last = scene.last || scene.begin

                scene.__.each( function( tixel, id ) {
                    if( tixel.begin === true || tixel.end === true ||
                        ( tixel.begin < now && tixel.end > scene.last ) ) {
                        try {
                            tixel.snap.apply( tixel )
                            if( events[ id ] &&
                                ( tixel.end === true || tixel.end <= now ) ) {
                                events[ id ][ 'end' ] = now
                            }
                        } catch(e) {
                        }
                    }
                } )
                scene.last = now
            }

            scene.__defineGetter__( 'clear', function() {
                this.__.clear
            } )

            var interval = { id : undefined }

            scene.__defineGetter__( 'once', once )
            scene.__defineGetter__( 'go', function() {
                if( interval.id === undefined ) {
                    interval.id =
                        setInterval( function() {
                            once.apply( scene, arguments )
                        },
                                   scene.capture.frequency.mHz )
                }
                return this
            } )
            scene.__defineGetter__( 'stop', function() {
                if( interval.id !== undefined ) {
                    clearInterval( interval.id )
                    interval.id = undefined
                }
                return this
            } )
            scene.__defineGetter__( 'running', function() {
                return interval.id !== undefined
            } )
            scene.__defineGetter__( 'pause', function() {
                return this.running ? this.stop : this.go
            } )
            return scene
        } )()

        var elems = {
            rect : function() {
                var $rect = $( this )
                var rect = {
                    set x( x ) { $rect.attr( 'x', x ) },
                    set y( y ) { $rect.attr( 'y', y ) },
                    set width( width ) { $rect.attr( 'width', width ) },
                    set height( height ) { $rect.attr( 'height', height ) },
                }
                rect.__defineSetter__( 'fill-opacity', function( val ) {
                    $rect.css( 'fill-opacity', val )
                } )
                return rect
            },
        }

        var interpolators = {
            number : function() {
                var val = ( this.from
                            + ( (this.to - this.from)
                                * (now - this.begin)
                                / (this.end - this.begin) ) )
                return this.elem[ this.attr ] = val
            },
        }

        var parsers = {
            json : function() {
                return JSON.parse( $this.text() )
            },
            javascript : function() {
                return eval( '(function() { return ' + $this.text().trim() + ' })()' )
            },
        }

        String.prototype.endsWith = function(str) {
            return this.match( str + '$' ) == str
        }

        $( window ).bind( 'load', function() {
            var scope = new List()
            $.__.$( 'tip:script' ).children().each( function traverse() {
                var parentScope = scope
                scope = new Superlist( scope )
                var $this = $( this )
                if( this.localName == 'function' ) {
                    var func = eval( '(function() { return function() { '
                                     + $this.text().trim()
                                     + ' } })()' )
                    var id = $this.attr( 'id' )
                    scene.__.set( id, {
                        begin : true,
                        end : true,
                        snap : func,
                    } )
                } else if( this.localName == 'animate' ) {
                    this.attributes.each( function( val, key ) {
                        switch( key ) {
                        case 'begin':
                        case 'end':
                        case 'duration':
                            // event
                            if( match = val.match( /([a-z]+)\.(begin|end)/ ) ) {
                                events[ match[1] ] = events[ match[1] ] || {}
                                val = new MapPointer( events[ match[1] ],
                                                      match[2] )
                            } else if( match = val.match( /([+-]*(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+))(h|m|s)/ ) ) {
                                var quantity = parseFloat( match[1] )
                                switch( match[2] ) {
                                case 'h':
                                    quantity *= 60
                                case 'm':
                                    quantity *= 60
                                case 's':
                                    quantity *= 1000
                                }
                                val = quantity
                            }
                            break
                        case 'attr':
                            var attrs = val.split( ',' )
                            attrs.each( function( attr ) {
                                scene.__.push( {
                                    begin : scope.begin,
                                    end : scope.end,
                                    elem : scope.elem,
                                    attr : attr,
                                    snap : interpolators[ 'number' ],
                                } )
                            } )
                            break
                        }
                        if( val !== undefined ) {
                            scope.__.set( key, val )
                        }
                    } )
                } else {
                    scope.__.set( 'elem', elems[ this.localName ].apply( this ) )
                    $.__.$( '#' ).append( $this )
                }
                $this.children().each( traverse )
                scope = parentScope
            } )
            scene.go
        } )
    ]]></script>
    <style type="text/css">
    </style>
  </defs>
  <tip:script>
    <function id="resize"><![CDATA[
      var win = __.load( '.../lib/tip/win.js' )
      var view = __.load( '.../lib/tip/view.jquery' )
      if( ! win || ! view ) {
        throw 'loading'
      } else {
        view.x = -win.width / 2
        view.y = -win.height / 2
        view.width = win.width
        view.height = win.height
        view.tx
        $( '#resize' ).remove()
      }
    ]]></function>
    <rect id="box">
      <animate begin="resize.end" duration="1s">
        <animate from="0" to="-25" attr="x,y"/>
        <animate to="50" attr="width,height"/>
        <animate from="0" to="1" attr="fill-opacity"/>
      </animate>
    </rect>
  </tip:script>
</svg>
