<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Text Bounding Box</title>
  <defs>
      <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>
      <script type="text/javascript"><![CDATA[
        $(window).bind( 'load', function() {
            var $root = $.__.$('#')
            $root.__defineGetter__( 'view', function() {
                this.view_obj =
                    ( this.view_obj || ( function( attr ) {
                        var view = attr.split( ' ' )
                        return {
                            x : view[0],
                            y : view[1],
                            width : view[2],
                            height : view[3],
                        }
                    } )( this.attr( 'viewBox' ) ) )
                return this.view_obj
            } )
            $root.__defineSetter__( 'view', function( view ) {
                this.view_obj = view
                this.attr( 'viewBox', ( view.x + ' ' +
                                        view.y + ' ' +
                                        view.width + ' ' +
                                        view.height ) )
                return this.view_obj
            } )

            var resize = false
            if( resize ) {
                $root.view = { x : - window.innerWidth / 2,
                               width : window.innerWidth,
                               y : - window.innerHeight / 2,
                               height : window.innerHeight,
                             }
            }

            var $input = ( function() {
                var $input = $.__.$('<html:input/>')
                $input.__defineGetter__( 'value', function( ) {
                    return this.val.apply( this, arguments )
                } )
                $input.__defineSetter__( 'value', function( value ) {
                    if( this.value != value ) {
                        this.val.apply( this, arguments )
                        this.change()
                    }
                    return this
                } )
                $input.__defineSetter__( 'editable', function( editable ) {
                    this.editable = editable
                } )
                $input.keydown( function( event ) {
                    if( this.editable === false ) {
                        return false
                    }
                } )
                $input.keyup( function( event ) {
                    $input.change()
                } )
                return $input
            } )()

            var $bg = ( function() {
                var $rect = $.__.$('<rect/>')
                return $rect
            } )()
            $root.append( $bg )

            var $holder = ( $.__.$('<foreignObject/>')
                            .css( 'visibility', 'hidden' )
                            .attr( $root.view ) )
            $root.append( $holder.append( $input ) )
            var input = $input.get(0)
            var shift = 0 //( $.browser.webkit ? -3 : 0 )
            var pad = $.browser.mozilla ? 1 : 0
            $holder.attr( {
                x : - input.offsetWidth / 2,
                width : input.offsetWidth,
                y : - input.offsetHeight / 2 + shift,
                height : input.offsetHeight + pad,
            } )
            $holder.css( 'visibility', 'visible' )
            
            var $work = ( $.__.$('<g/>')
                          .attr( 'visibility', 'hidden' )
                        )
                          
            var $text = ( function() {
                var $text = $.__.$('<text/>')
                $text.__defineGetter__( 'x', function( ) {
                    return this.attr( 'x' )
                } )
                $text.__defineSetter__( 'x', function( x ) {
                    this.attr( 'x', x )
                } )
                $text.__defineGetter__( 'y', function( ) {
                    return this.attr( 'y' )
                } )
                $text.__defineSetter__( 'y', function( y ) {
                    this.attr( 'y', y )
                } )
                
                var $text_text = $text.text
                $text.__defineGetter__( 'text', function( ) {
                    $text_text.apply( $text, arguments )
                } )
                $text.__defineSetter__( 'text', function( ) {
                    $text_text.apply( $text, arguments )
                } )
                $text.__defineGetter__( 'bbox', function() {
                    return $text.get(0).getBBox()
                } )
                return $text
            } )()
            $root.append( $work.append( $text ) )

            $input.change( function() {
                $text.css( {
                    'font-family' : $input.css( 'font-family' ),
                    'font-size' : $input.css( 'font-size' ),
                    'font-weight' : $input.css( 'font-weight' ),
                } )
                $text.text = 'â–ˆ'
                var fullHeight = $text.bbox.height

                $text.text = $input.value.replace( / /g, '\u00A0' )

                var box = $text.bbox
                // Shift necessary to center the box
                var shift = {
                    x : 0,
                    y : $.browser.webkit ? 3
                        : $.browser.mozilla ? 2 : 0,
                }
                var pad = {
                    width : 3,
                    height : $.browser.mozilla ? 4 : 0,
                }
                var size = {
                    width : box.width + pad.width,
                    height : fullHeight + pad.height,
                }
                $bg.attr( {
                    x : - size.width / 2 + shift.x,
                    width : size.width,
                    y : - size.height / 2 + shift.y,
                    height : size.height,
                } )
            } )
            $input.value = 'text'
        } )
      ]]></script>

      <style type="text/css">
        text { text-anchor: middle }
        rect { fill: #F0F0F0; fill-opacity: .75;
               stroke-width: .3; stroke: black; stroke-opacity: .5 }
input, input:focus { border: none; text-align: center; padding: 0; margin: 0; outline: none; background-color: transparent }
        line { stroke: blue }
foreignObject { overflow: visible }
      </style>
  </defs>
</svg>
