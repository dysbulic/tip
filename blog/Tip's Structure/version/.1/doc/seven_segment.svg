<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20000303 Stylable//EN"
 "http://www.w3.org/TR/2000/03/WD-SVG-20000303/DTD/svg-20000303-stylable.dtd">
<svg viewBox="-12 -22 24 44"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:tip=".../lib/tip/">
  <title>Seven Segment Display</title>
  <defs>
    <linearGradient id="on">
      <stop id="start" offset="5%" style="stop-color: orange">
        <animateColor attributeName="stop-color" attributeType="CSS"
                      values="yellow; green; blue; yellow" dur="10s"
                      begin="SVGLoad; mousedown" repeatCount="1"/>
      </stop>
      <stop offset="95%" style="stop-color: red">
        <animateColor attributeName="stop-color" attributeType="CSS"
                      values="red; orange; red; purple; red" dur="9s"
                      repeatCount="1"/>
      </stop>
    </linearGradient>
    <script type="text/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/pointers.js"/>
    <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
    <script type="text/javascript" xlink:href=".../lib/tip/tip.jquery"/>

    <script type="text/javascript"><![CDATA[
        console.log( 'p' + this.parent.parent.document.__ )
        //document.__ = {}
        function SevenSegment() {
            function number( number ) {
                var bits
                switch( number ) {
                case 0: case '0': bits = '1111110'; break
                case 1: case '1': bits = '0110000'; break
                case 2: case '2': bits = '1101101'; break
                case 3: case '3': bits = '1111001'; break
                case 4: case '4': bits = '0110011'; break
                case 5: case '5': bits = '1011011'; break
                case 6: case '6': bits = '1011111'; break
                case 7: case '7': bits = '1110000'; break
                case 8: case '8': bits = '1111111'; break
                case 9: case '9': bits = '1111011'; break
                case 10: case 'a': case 'A': case '10': bits = '1110111'; break
                case 11: case 'b': case 'B': case '11': bits = '0011111'; break
                case 12: case 'c': case 'C': case '12': bits = '1001110'; break
                case 13: case 'd': case 'D': case '13': bits = '0111101'; break
                case 14: case 'e': case 'E': case '14': bits = '1001111'; break
                case 15: case 'f': case 'F': case '15': bits = '1000111'; break
                default: bits = ''
                }
                this.bits = bits
            }
            this.__defineSetter__( 'number', number )
            this.__defineSetter__( 'num', number )

            this.__defineSetter__( 'bits', function( bits ) {
                this.clear
                bits.each( function( bit ) {
                    this.top = bit
                } )
            } )
            
            var _segments
            this.__defineGetter__( 'segments', function() {
                return _segments = _segments || ( function() {
                    var marks = {
                        'flag field' : function() {
                            var mark = ''
                            for( i = 1; i <= this.max; i++ ) {
                                mark += ( i == this.position
                                          ? '1' : '0' )
                            }
                            return mark
                        }
                    }
                    var marker = {
                        position : 0,
                        form : 'flag field',
                        max : 7,
                        get next() {
                            ++this.position
                            return marks[ this.form ].apply( this )
                        }
                    }

                    var segments = new List
                    var $segments = $( '[name = "seven segment"]' ).clone()
                    console.log( 'hi' )
                    $.__.$( '#' ).append( $('<rect width="10" height="10"/>') )
                    $.__.$( '#' ).append( $segments )
                    //$( 'svg' ).append( $segments )
                    var uid = 'id.' + Math.random()
                    var tags = {
                        use : function( ) {
                            var src = this.attr( 'xlink:href' )
                            if( src.substring( 0, 3 ) == '#./' ) {
                                this.attr( 'xlink:href',
                                           '#./' + uid + '-' + src.substring( 3 ) )
                            }
                        },
                        polygon : function( ) {
                            var id = this.attr( 'id' )
                            if( id.substring( 0, 2 ) == './' ) {
                                this.attr( 'id', './' + uid + '-' + id.substring( 2 ) )
                            }
                        },
                    } 
                    $segments.children().each( function() {
                        tags[ this.nodeName ].apply( $( this ) )
                        segments.__.set( marker.next, ( function() {
                            var $segment = $( this )
                            return {
                                set state( state ) {
                                    switch( state ) {
                                    case true:  state = 'on';  break
                                    case false: state = 'off'; break
                                    }
                                    
                                    if( state === undefined ) {
                                        $segment.removeAttr( 'state' )
                                    } else {
                                        $segment.attr( 'state', state )
                                    }
                                },
                                get on() { this.state = 'on' },
                                get off() { this.state = 'off' },
                            }
                        } ).apply( this ) )
                    } )
                    var count = 0
                    var max = 7

                    segments.__defineSetter__ ( 'top', function( state ) {
                        this.__.get( ++count % ( max + 1 ) ).state =
                            ( state == '1' || state == 1 || state === true )
                    } )
                    segments.__defineGetter__( 'clear', function() {
                        this.__.each( function() {
                            this.off
                        } )
                        count = 0
                    } )
                    return segments
                } )()
            } )
        return this
    }

        $( window ).bind( 'load', function() {
            var args = new List
            var argStrs = window.location.search.substring(1).split( /&/ )
            argStrs.each( function( arg ) {
                arg = arg.replace( /\+/gi, ' ' )
                if( match = arg.match( /(.*?)=(.*)/ ) ) {
                    args.__.set( unescape( match[ 1 ] ),
                                 unescape( match[ 2 ] ) )
                }
            } )

            var segment = new SevenSegment
            segment.clear
            
            args.__.each( function( val, name ) {
                segment[ name ] = val
            } )
        } )
    ]]></script>
    <g name="seven segment">
      <use xlink:href="#./segment" transform="translate( 0, -20 )"/>
      <use xlink:href="#./segment" transform="rotate( 90 ) translate( -10, -10 )"/>
      <use xlink:href="#./segment" transform="rotate( 90 ) translate( 10, -10 )"/>
      <use xlink:href="#./segment" transform="translate( 0, 20 )"/>
      <use xlink:href="#./segment" transform="rotate( 90 ) translate( 10, 10 )"/>
      <use xlink:href="#./segment" transform="rotate( 90 ) translate( -10, 10 )"/>
      <polygon id="./segment" points='-10,0 -8,2 8,2 10,0 8,-2 -8,-2' />
    </g>
    <style type='text/css'>
      polygon { stroke-width: 0.1; stroke: black }
      [state="on"] { fill: #730000; fill: url(#on) }
      [state="off"] { fill: #F3F3F3; stroke: #DDD }
    </style>
  </defs>
</svg>
