String to compare to is "will"
Strings being compared are:
	"will"
Stack [0]: States in the stack are:
	From 	To 	Id 	Bound
	0	0	0	0
Stack [1]: Stack is empty.
Stack [2]: Stack is empty.
Stack [3]: Stack is empty.

Calculating the detour for going from (0,0) to (0,1) in string "will"
Calculating the detour for going from (0,0) to (1,0) in string "will"
Calculating the detour for going from (0,0) to (1,1) in string "will"
	Comparing w in "will" with w in "will"

Stack [0]: States in the stack are:
	From 	To 	Id 	Bound
	1	1	0	0
Stack [1]: Stack is empty.
Stack [2]: States in the stack are:
	From 	To 	Id 	Bound
	0	1	0	1
	1	0	0	1
Stack [3]: Stack is empty.

Calculating the detour for going from (1,1) to (1,2) in string "will"
	Comparing w in "will" with i in "will"
Calculating the detour for going from (1,1) to (2,1) in string "will"
	Comparing i in "will" with w in "will"
Calculating the detour for going from (1,1) to (2,2) in string "will"
	Comparing i in "will" with i in "will"

Stack [0]: States in the stack are:
	From 	To 	Id 	Bound
	2	2	0	0
Stack [1]: Stack is empty.
Stack [2]: States in the stack are:
	From 	To 	Id 	Bound
	0	1	0	1
	1	0	0	1
	1	2	0	1
	2	1	0	1
Stack [3]: Stack is empty.

Calculating the detour for going from (2,2) to (2,3) in string "will"
	Comparing i in "will" with l in "will"
Calculating the detour for going from (2,2) to (3,2) in string "will"
	Comparing l in "will" with i in "will"
Calculating the detour for going from (2,2) to (3,3) in string "will"
	Comparing l in "will" with l in "will"

Stack [0]: States in the stack are:
	From 	To 	Id 	Bound
	3	3	0	0
Stack [1]: Stack is empty.
Stack [2]: States in the stack are:
	From 	To 	Id 	Bound
	0	1	0	1
	1	0	0	1
	1	2	0	1
	2	1	0	1
	2	3	0	1
	3	2	0	1
Stack [3]: Stack is empty.

Calculating the detour for going from (3,3) to (3,4) in string "will"
	Comparing l in "will" with l in "will"
Calculating the detour for going from (3,3) to (4,3) in string "will"
	Comparing l in "will" with l in "will"
Calculating the detour for going from (3,3) to (4,4) in string "will"
	Comparing l in "will" with l in "will"

Stack [0]: States in the stack are:
	From 	To 	Id 	Bound
	4	4	0	0
Stack [1]: Stack is empty.
Stack [2]: States in the stack are:
	From 	To 	Id 	Bound
	0	1	0	1
	1	0	0	1
	1	2	0	1
	2	1	0	1
	2	3	0	1
	3	2	0	1
	3	4	0	1
	4	3	0	1
Stack [3]: Stack is empty.


The closest string to will is will
