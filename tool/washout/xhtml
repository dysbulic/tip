<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Washing Out SVGs</title>
    <link rel="stylesheet" type="text/css" href=".../style/main/css" />
    <style type="text/css">
      .historylink {
        font-size: 120px;
        font-variant: small-caps;
        padding-left: 215px;
        background: url('book.linked-washout.png') no-repeat top left;
        height: 155px;
      }
      .historylink:hover { background-image: url('book.embedded-washout.png'); }
    </style>
    <script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-939849-1";
      urchinTracker();
    </script>
  </head>
  <body>
    <h1>Washing Out <acronym title="Scaleable Vector Graphics">SVG</acronym>s</h1>
    <p>I have a <a href="http://riddlecreek.holcomb.info">site</a> where I want to use the effect of a grayed out image that is colored when hovered over. The images are simple ones I did in <a href="http://www.inkscape.org">Inkscape</a>. Theoretically, all I need to do is override the CSS styles to pull out all the colors and soften the lines.</p>
    <p><a href="http://xmlgraphics.apache.org/batik/">Batik</a> has support for a user stylesheet. The problem is that the styles in the document are all inline styles and there's no easy way to override them.</p>
    
    <p>One potential solution is to write a javascript to go through the document after it is loaded and pull out the inline styles. It would be relatively easy to do, but there are a couple problems:</p>
    <ul>
      <li>Batik doesn't have an option for loading a script not included in the document and, to the best of my knowledge, Inkscape doesn't have an option for linking to a script, so it would have to be added by hand</li>
      <li>If someone happens across an image on the web, I want for them to see the colorized original. I don't even know if it is possible to know if Batik is being invoked as a viewer or a rasterizer from within a script</li>
      <li>I don't want to override all of the styles, only the colors. That is easy enough, but it means and further changes have to be made in code rather than CSS and I like to keep the elements requiring editing as simple as possible</li>
    </ul>
    
    <p>A different tact is to simply create a new file with all of the style declarations grouped into a <code>style</code> block. They would then fall under normal inheritance rules.</p>
    <p>Programatically, this shouldn't be a terrible difficult program to write. It could be done procedurally in anything with a DOM implementation, but I am going to use XSLT. That, combined with a new style should solve the problem:</p>

    <ul>
      <li><a href="group_inline_styles.xslt">group_inline_styles.xslt</a>: When invoked with the <code>washout</code> parameter, a stylesheet is linked which will override the default colors</li>
      <li><a href="washout.css">washout.css</a>: Simple CSS stylesheet to washout the colors</li>
      <li><a href="Makefile">Makefile</a>: Sample Makefile of how to use these styles</li>
    </ul>

    <hr />

    <p>So, you start off with a svg like this one:</p>
    <object data="book.svg" type="image/svg+xml" width="210" height="156"></object>

    <p>Then you run:</p>

    <p><code>xsltproc <a href="group_inline_styles.xslt">group_inline_styles.xslt</a> <a href="book.svg">book.svg</a> > <a href="book.embedded-style.svg">book.embedded-style.svg</a></code></p>
    <object data="book.embedded-style.svg" type="image/svg+xml" width="210" height="156"></object>

    <p>This image doesn't look different, but the structure is different in two important ways:</p>
    <ul>
      <li>All of the style declarations are in an embedded <code>style</code> block in image's header rather than being inline</li>
      <li>The view is controlled by a <code>viewBox</code> rather than the <code>height</code> and <code>width</code>attributes (so the image will scale)</li>
    </ul>

    <p>Inline styles cannot be overridden by document ones. To rasterize the document do:</p>

    <p><code>java -jar ~/bin/batik-1.6/batik-rasterizer.jar -cssUser file://$(pwd)/<a href="washout.css">washout.css</a> -d <a href="book.embedded-washout.png">book.embedded-washout.png</a> -w 210 -h 155 <a href="book.embedded-style.svg">book.embedded-style.svg</a></code></p>
    <img src="book.embedded-washout.png" alt="Washed-out Book" />

    <p>Unfortunately, Batik ignores the <code>viewBox</code> and always outputs a square image when working with a height and width of 100%. Additionally, the user defined style doesn't seem to be having any effect. Perhaps embedded stylesheets take priority over external styles?</p>

    <p><code>xsltproc -stringparam style_filename <a href="book.group.css">book.group.css</a> <a href="group_inline_styles.xslt">group_inline_styles.xslt</a> <a href="book.svg">book.svg</a> > <a href="book.external-style.svg">book.external-style.svg</a></code></p>
    <object data="book.external-style.svg" type="image/svg+xml" width="210" height="156"></object>

    <p>This version is like the embedded one except the styles are put in an external file: <a href="book.group.css">book.group.css</a>. The rasterizing process is the same though:</p>
    <p><code>java -jar ~/bin/batik-1.6/batik-rasterizer.jar -cssUser file://$(pwd)/<a href="washout.css">washout.css</a> -d <a href="book.external-washout.png">book.external-washout.png</a> -w 210 -h 155 <a href="book.external-style.svg">book.external-style.svg</a></code></p>
    <img src="book.embedded-washout.png" alt="Washed-out Book" />

    <p>That also doesn't work. How about with the washout style linked to from within the document?</p>

    <p><code>xsltproc -stringparam washout true <a href="group_inline_styles.xslt">group_inline_styles.xslt</a> <a href="book.svg">book.svg</a> > <a href="book.linked-style.svg">book.linked-style.svg</a></code></p>
    <object data="book.linked-style.svg" type="image/svg+xml" width="210" height="156"></object>

    <p>Which, when rasterized, produces:</p>

     <p><code>java -jar ~/bin/batik-1.6/batik-rasterizer.jar -d <a href="book.linked-washout.png">book.linked-washout.png</a> -w 210 -h 155 <a href="book.linked-style.svg">book.linked-style.svg</a></code></p>
    <img src="book.linked-washout.png" alt="Washed-out Book" />

    <p>So, apparently the <code>cssUser</code> argument just doesn't work? I get the same result when working with <code>cssAlternate</code>. Further testing shows that it is only the <code>! important</code> declarations that seem not to take effect.</p>

    <p>Copies of all these commands are available in the <a href="Makefile">Makefile</a> for this page.</p>
    
    <hr />
    
    <div><a class="historylink" href="http://history.com">History</a></div>
  </body>
</html>
